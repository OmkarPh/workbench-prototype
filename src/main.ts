import { ipcMain, dialog, app, BrowserWindow, Menu, shell } from 'electron';
// import sqlite3 from 'sqlite3'

import isDev from 'electron-is-dev';
import * as electronOs from "os"

import {
  ErrorInfo,
  OPEN_DIALOG_CHANNEL,
  OPEN_ERROR_DIALOG_CHANNEL,
  IMPORT_REPLY_CHANNEL,
  SAVE_REPLY_CHANNEL, 
  JSON_IMPORT_REPLY_FORMAT,
  SQLITE_IMPORT_REPLY_FORMAT,
  SQLITE_SAVE_REPLY_FORMAT,
} from './constants/IpcConnection';
import getTemplate from './mainMenu';


// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

// console.log("Sqlit3:", sqlite3);


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}
// app.allowRendererProcessReuse = false;

const createWindow = (): void => {
  // ipcMain.handle('dialog', (event, method, params) => {
  //   dialog[method](params);
  // });
  // contextBridge.exposeInMainWorld('electron', {
  //   openDialog: (method, config) => ipcRenderer.invoke('dialog', method, config),
  //   // dialog: dialog
  // });
  // app.allowRendererProcessReuse = false;

  // Create the browser window.
  const mainWindow = new BrowserWindow({
    title: "Scancode workbench Prototype",
    width: 1200,
    height: 800,
    icon: 'assets/app-icon/png/scwb_layered_01.png',
    webPreferences: {
      // preload: path.join(__dirname, 'index.js'),
      nodeIntegration: true,
      nodeIntegrationInWorker: true,
      // webSecurity: false,
      // nodeIntegrationInSubFrames: true,
      contextIsolation: false,
      // enable
      // enableRemoteModule: true,
    }
  }); 
  // remoteMain.enable(mainWindow.webContents);
  
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
  
  console.log("Dev mode: ", isDev);
  
  // open all URLs in default browser window
  // We do this only in production, to prevent hot reloads getting opened in browser
  if(!isDev){
    mainWindow.webContents.on('will-navigate', (event, url) => {
      event.preventDefault();
      shell.openExternal(url);
    });
  }
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// @TOIMPROVE
// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On MacOS, it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
    Menu.setApplicationMenu(Menu.buildFromTemplate(getTemplate()));
  }
});


ipcMain.on(OPEN_DIALOG_CHANNEL.JSON, (event, arg) => {
  console.log("JSON file prompt", arg)

  dialog.showOpenDialog({
    title: 'Open a JSON File',
    filters: [{
        name: 'JSON File',
        extensions: ['json']
    }]
    }).then(({filePaths}) => {
        if (filePaths === undefined) {
          return;
        }
        const jsonFilePath = filePaths[0];
        let defaultPath;
        
        if (electronOs.platform() === 'linux') {
          // remove the .json (or other) extention of the path.
          defaultPath = jsonFilePath.substring(0, jsonFilePath.lastIndexOf('.')) + '.sqlite';
        } else {
          // FIXME: this is some ugly regex used to get filename with no extension.
          // see: https://stackoverflow.com/questions/4250364/how-to-trim-a-file-extension-from-a-string-in-javascript
          defaultPath = jsonFilePath.replace(/^.*[\\/]/, '').replace(/\.[^/.]+$/, '');
        }
        console.log("jsonFilePath", jsonFilePath);
        console.log("defaultPath", defaultPath);
        
        // Immediately ask for a SQLite to save and create the database
        dialog.showSaveDialog({
            title: 'Save a SQLite Database File',
            defaultPath: defaultPath,
            filters: [{
            name: 'SQLite File',
            extensions: ['sqlite']
            }]
        }).then((sqliteFile) => {
            const sqliteFilePath = sqliteFile.filePath;
            if (sqliteFilePath === undefined) {
              console.log("Sqlite file path isn't valid:", sqliteFilePath);
              return;
            }
            const reply: JSON_IMPORT_REPLY_FORMAT = {
              jsonFilePath,
              sqliteFilePath
            }
            event.sender.send(IMPORT_REPLY_CHANNEL.JSON, reply);
        });
    });
});

ipcMain.on(OPEN_DIALOG_CHANNEL.SQLITE, (event, arg) => {
  console.log("SQLite file prompt", arg)

  dialog.showOpenDialog({
    properties: ['openFile'],
    title: 'Open a SQLite File',
    filters: [{
      name: 'SQLite File',
      extensions: ['sqlite']
    }]
  }).then(({ filePaths }) => {
    if (filePaths && filePaths[0]) {
      const sqliteFilePath = filePaths[0]
      const reply: SQLITE_IMPORT_REPLY_FORMAT = { sqliteFilePath };
      event.sender.send(IMPORT_REPLY_CHANNEL.SQLITE, reply);
    } else {
      console.log("Sqlite file path isn't valid:", filePaths);
      return;
    }
  });
});

ipcMain.on(OPEN_DIALOG_CHANNEL.SAVE_SQLITE, (event) => {
  dialog.showSaveDialog({
    title: 'Save as a Database File',
    defaultPath: 'fileName.sqlite',
    filters: [
      { name: 'SQLite File', extensions: ['sqlite'] }
    ]
  }).then((file) => {
    const sqliteFilePath = file?.filePath;
    if (sqliteFilePath) {
      const reply: SQLITE_SAVE_REPLY_FORMAT = { sqliteFilePath };
      event.sender.send(SAVE_REPLY_CHANNEL.SQLITE, reply);
    } else {
      console.log("Sqlite file path isn't valid:", file, sqliteFilePath);
      return;
    }
  });
});

ipcMain.on(OPEN_ERROR_DIALOG_CHANNEL, (event, arg: ErrorInfo) => {
  console.log("Showing error to user:", arg)

  dialog.showErrorBox(
    arg.title,
    arg.message
  );
});